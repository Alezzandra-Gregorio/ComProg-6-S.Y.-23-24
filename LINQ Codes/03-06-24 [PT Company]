using System;
using System.Collections.Generic;
using System.Linq;

public class Program
{
	public static void Main()
	{
		List<Employee> employees = new List<Employee>();
		
		employees.Add(new Employee()
		{
			ID = 1,
			NAME = "Christian Usares",
			COMPANY = "ABC",
			SALARY = 165000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 2,
			NAME = "Johna Espiritu",
			COMPANY = "ABC",
			SALARY = 150000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 3,
			NAME = "Alezzandra Gregorio",
			COMPANY = "ABC",
			SALARY = 160000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 4,
			NAME = "Adrian Calano",
			COMPANY = "XYZ",
			SALARY = 17000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 5,
			NAME = "Julius Medina",
			COMPANY = "XYZ",
			SALARY = 15000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 6,
			NAME = "Erika Sambo",
			COMPANY = "XYZ",
			SALARY = 18000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 7,
			NAME = "Lilia Vanrouge",
			COMPANY = "Freelancers",
			SALARY = 10000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 8,
			NAME = "Malleus Draconia",
			COMPANY = "Freelancers",
			SALARY = 11000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 9,
			NAME = "Sebek Zigvolt",
			COMPANY = "Freelancers",
			SALARY = 9000.00M
		});
		
		employees.Add(new Employee()
		{
			ID = 10,
			NAME = "Silver Vanrouge",
			COMPANY = "Freelancers",
			SALARY = 9000.00M
		});
		
		Console.WriteLine("\nEmployees sorted by name:");
		DisplayNamesAlphabetically(employees);
		
		Console.WriteLine("\nDisplay IDs & Names:");
		employees.ForEach(employee => 
		{
			Console.WriteLine(employee.ID + " " + employee.NAME);
		});
		
		Console.WriteLine("\nAverage salary of freelancers:");
		DisplayAverageSalaryOfFreelancers(employees);
		
		decimal sum = employees.Select(x => x.SALARY).Sum();
		Console.WriteLine("\ntTotal of all salaries: " + sum);
		
		var LMNOP = employees.Any(employee => employee.COMPANY == "LMNOP");
		Console.WriteLine("\nIs there an LMNOP company?\n- " + LMNOP);
		
		Console.WriteLine("\nNumber of employees with odd employee IDs: " + CountEmployeesWithOddID(employees));

        Console.WriteLine("\nCompany names:");
        DisplayUniqueCompanyNames(employees);

        Console.WriteLine("\nDifference between highest and lowest salary: " + GetSalaryDifference(employees));
	}
	
	
	public static void DisplayNamesAlphabetically(List<Employee> employees)
	{
		var sortedEmployees = employees.OrderBy(e => e.NAME).ToList();
		sortedEmployees.ForEach(employee => 
		{
			Console.WriteLine(employee.NAME);
		});
	}

	public static void DisplayAverageSalaryOfFreelancers(List<Employee> employees)
	{
		var freelancerSalaries = employees
			.Where(employee => employee.COMPANY == "Freelancers")
			.Select(employee => employee.SALARY);
			
		if (freelancerSalaries.Any())
		{
			decimal averageSalary = freelancerSalaries.Average();
			Console.WriteLine(averageSalary);
		}
		else
		{
			Console.WriteLine("No freelancers found.");
		}
	}
	
	public static decimal GetSalaryDifference(List<Employee> employees)
    {
        decimal highestSalary = employees.Max(employee => employee.SALARY);
        decimal lowestSalary = employees.Min(employee => employee.SALARY);
        return highestSalary - lowestSalary;
    }
	
	public static void DisplayUniqueCompanyNames(List<Employee> employees)
    {
        var uniqueCompanyNames = employees.Select(employee => employee.COMPANY).Distinct().Take(3);
        foreach (var companyName in uniqueCompanyNames)
        {
            Console.WriteLine(companyName);
        }
    }
	
	public static int CountEmployeesWithOddID(List<Employee> employees)
    {
        return employees.Count(employee => employee.ID % 2 != 0);
    }
}



public class Employee
{
	public int ID { get; set; }
	public string NAME { get; set; }
	public string COMPANY { get; set; }
	public decimal SALARY { get; set; }
}
